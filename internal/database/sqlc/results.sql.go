// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: results.sql

package db

import (
	"context"
)

const createResult = `-- name: CreateResult :one
INSERT INTO results (user_id, page_url, link_url, status)
VALUES ($1, $2, $3, $4)
    RETURNING id, user_id, page_url, link_url, status, checked_at
`

type CreateResultParams struct {
	UserID  int32
	PageUrl string
	LinkUrl string
	Status  string
}

func (q *Queries) CreateResult(ctx context.Context, arg CreateResultParams) (Result, error) {
	row := q.db.QueryRowContext(ctx, createResult,
		arg.UserID,
		arg.PageUrl,
		arg.LinkUrl,
		arg.Status,
	)
	var i Result
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PageUrl,
		&i.LinkUrl,
		&i.Status,
		&i.CheckedAt,
	)
	return i, err
}

const deleteResultsByUser = `-- name: DeleteResultsByUser :exec
DELETE FROM results
WHERE user_id = $1
`

func (q *Queries) DeleteResultsByUser(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteResultsByUser, userID)
	return err
}

const getResultByID = `-- name: GetResultByID :one
SELECT id, user_id, page_url, link_url, status, checked_at FROM results
WHERE id = $1
`

func (q *Queries) GetResultByID(ctx context.Context, id int32) (Result, error) {
	row := q.db.QueryRowContext(ctx, getResultByID, id)
	var i Result
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PageUrl,
		&i.LinkUrl,
		&i.Status,
		&i.CheckedAt,
	)
	return i, err
}

const listResultsByUser = `-- name: ListResultsByUser :many
SELECT id, user_id, page_url, link_url, status, checked_at FROM results
WHERE user_id = $1
ORDER BY checked_at DESC
    LIMIT $2 OFFSET $3
`

type ListResultsByUserParams struct {
	UserID int32
	Limit  int32
	Offset int32
}

func (q *Queries) ListResultsByUser(ctx context.Context, arg ListResultsByUserParams) ([]Result, error) {
	rows, err := q.db.QueryContext(ctx, listResultsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Result
	for rows.Next() {
		var i Result
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PageUrl,
			&i.LinkUrl,
			&i.Status,
			&i.CheckedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
