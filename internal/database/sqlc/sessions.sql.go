// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package db

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, session_token, expires_at)
VALUES ($1, $2, $3)
    RETURNING id, user_id, session_token, expires_at, created_at
`

type CreateSessionParams struct {
	UserID       int32
	SessionToken string
	ExpiresAt    time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.UserID, arg.SessionToken, arg.ExpiresAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE session_token = $1
`

func (q *Queries) DeleteSession(ctx context.Context, sessionToken string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, sessionToken)
	return err
}

const deleteSessionsByUser = `-- name: DeleteSessionsByUser :exec
DELETE FROM sessions
WHERE user_id = $1
`

func (q *Queries) DeleteSessionsByUser(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSessionsByUser, userID)
	return err
}

const getActiveSessionsByUser = `-- name: GetActiveSessionsByUser :one
SELECT id, user_id, session_token, expires_at, created_at FROM sessions
WHERE user_id = $1 AND expires_at > NOW()
`

func (q *Queries) GetActiveSessionsByUser(ctx context.Context, userID int32) (Session, error) {
	row := q.db.QueryRowContext(ctx, getActiveSessionsByUser, userID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, user_id, session_token, expires_at, created_at FROM sessions
WHERE session_token = $1
`

func (q *Queries) GetSessionByToken(ctx context.Context, sessionToken string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByToken, sessionToken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
